Traceback (most recent call last):
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#----------------------Define particle Release Configurations------------------------#

# Initialize an empty list to store particle data
particle_data = []

# Iterate through the idomain array to find active cells in layers 2 to the end
for k in range(2, idomain.shape[0]):  # Loop through layers starting from layer 2
    for i in range(idomain.shape[1]):  # Loop through rows
        for j in range(idomain.shape[2]):  # Loop through columns
            if idomain[k, i, j] == 1:  # Check if the cell is active
                # Add particle starting location at the center of the cell
                particle_data.append((k, i, j))

# Define particle release configurations using flopy
mp7_particle_data_1a = flopy.modpath.ParticleData(
    particle_data,
    drape=0,
    structured=True,
    particleids=[i for i in range(len(particle_data))],
    localz=0.5,  # Release particles at the center of the cell in the z-direction
)

# Print the particle data for verification
print(mp7_particle_data_1a)

# ---------------- OPTIONAL: Define Local Refinement Cells -----------------#
# Initialize an empty list to store LRC regions
# lrcregions = []

# # Iterate through the idomain array to find active cells in layers 2 to the end
# for k in range(2, idomain.shape[0]):  # Loop through layers starting from layer 2
#     for i in range(idomain.shape[1]):  # Loop through rows
#         for j in range(idomain.shape[2]):  # Loop through columns
#             if idomain[k, i, j] == 1:  # Check if the cell is active
#                 # Add the active cell to the LRC regions
#                 lrcregions.append([k, i, j, i, j, k])

# # Define particle release configurations using flopy
# mp7_particle_data_1b = flopy.modpath.LRCParticleData(
#     subdivisiondata=[
#         flopy.modpath.FaceDataType(
#             drape=0,
#             verticaldivisions1=0,
#             horizontaldivisions1=0,
#             verticaldivisions2=0,
#             horizontaldivisions2=0,
#             verticaldivisions3=0,
#             horizontaldivisions3=0,
#             verticaldivisions4=0,
#             horizontaldivisions4=0,
#             rowdivisions5=0,
#             columndivisions5=0,
#             rowdivisions6=3,
#             columndivisions6=3,
#         )
#     ],
#     lrcregions=[lrcregions],
# )

# # Print the particle data for verification
# print(mp7_particle_data_1b)
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[2], line 7[0m
[0;32m      4[0m particle_data [38;5;241m=[39m []
[0;32m      6[0m [38;5;66;03m# Iterate through the idomain array to find active cells in layers 2 to the end[39;00m
[1;32m----> 7[0m [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;241m2[39m, [43midomain[49m[38;5;241m.[39mshape[[38;5;241m0[39m]):  [38;5;66;03m# Loop through layers starting from layer 2[39;00m
[0;32m      8[0m     [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(idomain[38;5;241m.[39mshape[[38;5;241m1[39m]):  [38;5;66;03m# Loop through rows[39;00m
[0;32m      9[0m         [38;5;28;01mfor[39;00m j [38;5;129;01min[39;00m [38;5;28mrange[39m(idomain[38;5;241m.[39mshape[[38;5;241m2[39m]):  [38;5;66;03m# Loop through columns[39;00m

[1;31mNameError[0m: name 'idomain' is not defined

