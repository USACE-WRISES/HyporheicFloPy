Traceback (most recent call last):
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#----------------------Model Setup Functions ------------------------#
# Save the function to a file
with open('build_gwf_model.py', 'w') as f:
    f.write("""
def build_gwf_model(example_name):
    print(f"Building GWF model for {example_name}")

    # Instantiate the MODFLOW 6 GWF simulation object
    gwfsim = flopy.mf6.MFSimulation(
        sim_name=gwf_name, exe_name=md6_exe_path, sim_ws=gwf_ws
    )

    # Instantiate the MODFLOW 6 temporal discretization package
    flopy.mf6.modflow.mftdis.ModflowTdis(
        gwfsim,
        pname="tdis",
        time_units="DAYS",
        nper=nper,
        perioddata=[(perlen, nstp, tsmult)],
    )

    # Instantiate the MODFLOW 6 gwf (groundwater-flow) model
    gwf = flopy.mf6.ModflowGwf(
        gwfsim, modelname=gwf_name, model_nam_file=f"{gwf_name}.nam", save_flows=True
    )

    # Instantiate the MODFLOW 6 gwf discretization package
    flopy.mf6.modflow.mfgwfdis.ModflowGwfdis(
        gwf,
        nlay=len(botm),  # Number of layers (based on `botm` list length)
        nrow=nrow,       # Number of rows in the grid
        ncol=ncol,       # Number of columns in the grid
        delr=cell_size_x,  # Cell width
        delc=cell_size_y,  # Cell height
        top=tops[0],       # List of dynamically calculated top elevation of the first layer
        botm=botm,          # List of bottom elevations for all layers
        idomain=idomain,    # List of dynamically calculated active and inactive cells in the model domain
        xorigin=xorigin,  # Assign dynamically calculated xorigin
        yorigin=yorigin   # Assign dynamically calculated yorigin
    )
    
    # Add initial conditions (IC package)
    strt_array = np.full((len(botm), nrow, ncol), bed_elevation)

    # Instantiate the MODFLOW 6 gwf initial conditions package
    flopy.mf6.modflow.mfgwfic.ModflowGwfic(gwf, pname="ic", strt= strt_array)
    
    # Instantiate the MODFLOW 6 gwf node property flow package
    flopy.mf6.modflow.mfgwfnpf.ModflowGwfnpf(
        gwf,
        pname="npf",
        icelltype= 2,
        k=kh,
        k33=kv,
        save_flows=True,
        save_saturation=True,
        save_specific_discharge=True,
    )

    # # Instantiate the MODFLOW 6 gwf recharge package
    # flopy.mf6.modflow.mfgwfrcha.ModflowGwfrcha(
    #     gwf,
    #     recharge=recharge_rate,
    #     auxiliary=["iface", "iflowface"],
    #     aux=[rch_iface, rch_iflowface],
    #     save_flows=True,
    # )

    # # Create the well package
    # flopy.mf6.ModflowGwfwel(
    #     gwf,
    #     maxbound=len(wel_data),
    #     stress_period_data={0: wel_data},
    #     pname='WEL'
    # )

    # Create an iterative model solution (IMS) for the MODFLOW 6 gwf model
    flopy.mf6.ModflowIms(
        gwfsim,
        print_option="SUMMARY",
        outer_dvclose=1e-4,  # Increase convergence criteria for outer iterations
        outer_maximum=200,  # Increase maximum number of outer iterations
        under_relaxation="NONE",
        inner_maximum=500,  # Increase maximum number of inner iterations
        inner_dvclose=1e-4,  # Increase convergence criteria for inner iterations
        rcloserecord=1e-4,  # Increase residual convergence criteria
        linear_acceleration="BICGSTAB",  # Switch to Bi-Conjugate Gradient Stabilized method
        scaling_method="NONE",
        reordering_method="NONE",
        relaxation_factor=0.97,  # Adjust relaxation factor
    )

    # Assign CHD Package to the model if there are valid unique boundary cells
    if not chd_data_converted:
        print("❌ No CHD boundary cells assigned. Please check the input data and conditions.")
    else:
    # Format the CHD values to ensure they are not in scientific notation
        formatted_chd_data = [
            [item[0], item[1], item[2], float(f"{item[3]:.2f}")]
            for item in chd_data_converted
    ]
    
        # Assuming 'gwf' is your groundwater flow model instance
        flopy.mf6.ModflowGwfchd(
            gwf,
            maxbound=len(formatted_chd_data),  # Set to actual assigned CHD cells
            stress_period_data={0: formatted_chd_data},  # Apply the boundary conditions in stress period 0
            pname="CHD",
            save_flows=True,
            filename=f"{gwf_name}.chd"
        )

    print(f"✅ Assigned {len(formatted_chd_data)} unique CHD boundary cells.")

    # Instantiate the MODFLOW 6 prt output control package
    saverecord = [("HEAD", "ALL"), ("BUDGET", "ALL")]
    printrecord = [("HEAD", "LAST")]
    flopy.mf6.ModflowGwfoc(
        gwf,
        saverecord=saverecord,
        head_filerecord=head_filerecord,
        budget_filerecord=budget_filerecord,
        printrecord=printrecord,
    )
    return gwfsim, gwf

print("✅ build_gwf_model function saved successfully.")
""")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mUnicodeEncodeError[0m                        Traceback (most recent call last)
Cell [1;32mIn[1], line 4[0m
[0;32m      1[0m [38;5;66;03m#----------------------Model Setup Functions ------------------------#[39;00m
[0;32m      2[0m [38;5;66;03m# Save the function to a file[39;00m
[0;32m      3[0m [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;124m'[39m[38;5;124mbuild_gwf_model.py[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mw[39m[38;5;124m'[39m) [38;5;28;01mas[39;00m f:
[1;32m----> 4[0m     [43mf[49m[38;5;241;43m.[39;49m[43mwrite[49m[43m([49m[38;5;124;43m"""[39;49m
[0;32m      5[0m [38;5;124;43mdef build_gwf_model(example_name):[39;49m
[0;32m      6[0m [38;5;124;43m    print(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43mBuilding GWF model for [39;49m[38;5;132;43;01m{example_name}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m      7[0m 
[0;32m      8[0m [38;5;124;43m    # Instantiate the MODFLOW 6 GWF simulation object[39;49m
[0;32m      9[0m [38;5;124;43m    gwfsim = flopy.mf6.MFSimulation([39;49m
[0;32m     10[0m [38;5;124;43m        sim_name=gwf_name, exe_name=md6_exe_path, sim_ws=gwf_ws[39;49m
[0;32m     11[0m [38;5;124;43m    )[39;49m
[0;32m     12[0m 
[0;32m     13[0m [38;5;124;43m    # Instantiate the MODFLOW 6 temporal discretization package[39;49m
[0;32m     14[0m [38;5;124;43m    flopy.mf6.modflow.mftdis.ModflowTdis([39;49m
[0;32m     15[0m [38;5;124;43m        gwfsim,[39;49m
[0;32m     16[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mtdis[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     17[0m [38;5;124;43m        time_units=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mDAYS[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     18[0m [38;5;124;43m        nper=nper,[39;49m
[0;32m     19[0m [38;5;124;43m        perioddata=[(perlen, nstp, tsmult)],[39;49m
[0;32m     20[0m [38;5;124;43m    )[39;49m
[0;32m     21[0m 
[0;32m     22[0m [38;5;124;43m    # Instantiate the MODFLOW 6 gwf (groundwater-flow) model[39;49m
[0;32m     23[0m [38;5;124;43m    gwf = flopy.mf6.ModflowGwf([39;49m
[0;32m     24[0m [38;5;124;43m        gwfsim, modelname=gwf_name, model_nam_file=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{gwf_name}[39;49;00m[38;5;124;43m.nam[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, save_flows=True[39;49m
[0;32m     25[0m [38;5;124;43m    )[39;49m
[0;32m     26[0m 
[0;32m     27[0m [38;5;124;43m    # Instantiate the MODFLOW 6 gwf discretization package[39;49m
[0;32m     28[0m [38;5;124;43m    flopy.mf6.modflow.mfgwfdis.ModflowGwfdis([39;49m
[0;32m     29[0m [38;5;124;43m        gwf,[39;49m
[0;32m     30[0m [38;5;124;43m        nlay=len(botm),  # Number of layers (based on `botm` list length)[39;49m
[0;32m     31[0m [38;5;124;43m        nrow=nrow,       # Number of rows in the grid[39;49m
[0;32m     32[0m [38;5;124;43m        ncol=ncol,       # Number of columns in the grid[39;49m
[0;32m     33[0m [38;5;124;43m        delr=cell_size_x,  # Cell width[39;49m
[0;32m     34[0m [38;5;124;43m        delc=cell_size_y,  # Cell height[39;49m
[0;32m     35[0m [38;5;124;43m        top=tops[0],       # List of dynamically calculated top elevation of the first layer[39;49m
[0;32m     36[0m [38;5;124;43m        botm=botm,          # List of bottom elevations for all layers[39;49m
[0;32m     37[0m [38;5;124;43m        idomain=idomain,    # List of dynamically calculated active and inactive cells in the model domain[39;49m
[0;32m     38[0m [38;5;124;43m        xorigin=xorigin,  # Assign dynamically calculated xorigin[39;49m
[0;32m     39[0m [38;5;124;43m        yorigin=yorigin   # Assign dynamically calculated yorigin[39;49m
[0;32m     40[0m [38;5;124;43m    )[39;49m
[0;32m     41[0m [38;5;124;43m    [39;49m
[0;32m     42[0m [38;5;124;43m    # Add initial conditions (IC package)[39;49m
[0;32m     43[0m [38;5;124;43m    strt_array = np.full((len(botm), nrow, ncol), bed_elevation)[39;49m
[0;32m     44[0m 
[0;32m     45[0m [38;5;124;43m    # Instantiate the MODFLOW 6 gwf initial conditions package[39;49m
[0;32m     46[0m [38;5;124;43m    flopy.mf6.modflow.mfgwfic.ModflowGwfic(gwf, pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mic[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, strt= strt_array)[39;49m
[0;32m     47[0m [38;5;124;43m    [39;49m
[0;32m     48[0m [38;5;124;43m    # Instantiate the MODFLOW 6 gwf node property flow package[39;49m
[0;32m     49[0m [38;5;124;43m    flopy.mf6.modflow.mfgwfnpf.ModflowGwfnpf([39;49m
[0;32m     50[0m [38;5;124;43m        gwf,[39;49m
[0;32m     51[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mnpf[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     52[0m [38;5;124;43m        icelltype= 2,[39;49m
[0;32m     53[0m [38;5;124;43m        k=kh,[39;49m
[0;32m     54[0m [38;5;124;43m        k33=kv,[39;49m
[0;32m     55[0m [38;5;124;43m        save_flows=True,[39;49m
[0;32m     56[0m [38;5;124;43m        save_saturation=True,[39;49m
[0;32m     57[0m [38;5;124;43m        save_specific_discharge=True,[39;49m
[0;32m     58[0m [38;5;124;43m    )[39;49m
[0;32m     59[0m 
[0;32m     60[0m [38;5;124;43m    # # Instantiate the MODFLOW 6 gwf recharge package[39;49m
[0;32m     61[0m [38;5;124;43m    # flopy.mf6.modflow.mfgwfrcha.ModflowGwfrcha([39;49m
[0;32m     62[0m [38;5;124;43m    #     gwf,[39;49m
[0;32m     63[0m [38;5;124;43m    #     recharge=recharge_rate,[39;49m
[0;32m     64[0m [38;5;124;43m    #     auxiliary=[[39;49m[38;5;124;43m"[39;49m[38;5;124;43miface[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43miflowface[39;49m[38;5;124;43m"[39;49m[38;5;124;43m],[39;49m
[0;32m     65[0m [38;5;124;43m    #     aux=[rch_iface, rch_iflowface],[39;49m
[0;32m     66[0m [38;5;124;43m    #     save_flows=True,[39;49m
[0;32m     67[0m [38;5;124;43m    # )[39;49m
[0;32m     68[0m 
[0;32m     69[0m [38;5;124;43m    # # Create the well package[39;49m
[0;32m     70[0m [38;5;124;43m    # flopy.mf6.ModflowGwfwel([39;49m
[0;32m     71[0m [38;5;124;43m    #     gwf,[39;49m
[0;32m     72[0m [38;5;124;43m    #     maxbound=len(wel_data),[39;49m
[0;32m     73[0m [38;5;124;43m    #     stress_period_data=[39;49m[38;5;124;43m{[39;49m[38;5;124;43m0: wel_data},[39;49m
[0;32m     74[0m [38;5;124;43m    #     pname=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mWEL[39;49m[38;5;124;43m'[39;49m
[0;32m     75[0m [38;5;124;43m    # )[39;49m
[0;32m     76[0m 
[0;32m     77[0m [38;5;124;43m    # Create an iterative model solution (IMS) for the MODFLOW 6 gwf model[39;49m
[0;32m     78[0m [38;5;124;43m    flopy.mf6.ModflowIms([39;49m
[0;32m     79[0m [38;5;124;43m        gwfsim,[39;49m
[0;32m     80[0m [38;5;124;43m        print_option=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mSUMMARY[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     81[0m [38;5;124;43m        outer_dvclose=1e-4,  # Increase convergence criteria for outer iterations[39;49m
[0;32m     82[0m [38;5;124;43m        outer_maximum=200,  # Increase maximum number of outer iterations[39;49m
[0;32m     83[0m [38;5;124;43m        under_relaxation=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mNONE[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     84[0m [38;5;124;43m        inner_maximum=500,  # Increase maximum number of inner iterations[39;49m
[0;32m     85[0m [38;5;124;43m        inner_dvclose=1e-4,  # Increase convergence criteria for inner iterations[39;49m
[0;32m     86[0m [38;5;124;43m        rcloserecord=1e-4,  # Increase residual convergence criteria[39;49m
[0;32m     87[0m [38;5;124;43m        linear_acceleration=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mBICGSTAB[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,  # Switch to Bi-Conjugate Gradient Stabilized method[39;49m
[0;32m     88[0m [38;5;124;43m        scaling_method=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mNONE[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     89[0m [38;5;124;43m        reordering_method=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mNONE[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     90[0m [38;5;124;43m        relaxation_factor=0.97,  # Adjust relaxation factor[39;49m
[0;32m     91[0m [38;5;124;43m    )[39;49m
[0;32m     92[0m 
[0;32m     93[0m [38;5;124;43m    # Assign CHD Package to the model if there are valid unique boundary cells[39;49m
[0;32m     94[0m [38;5;124;43m    if not chd_data_converted:[39;49m
[0;32m     95[0m [38;5;124;43m        print([39;49m[38;5;124;43m"[39;49m[38;5;124;43m❌ No CHD boundary cells assigned. Please check the input data and conditions.[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m     96[0m [38;5;124;43m    else:[39;49m
[0;32m     97[0m [38;5;124;43m    # Format the CHD values to ensure they are not in scientific notation[39;49m
[0;32m     98[0m [38;5;124;43m        formatted_chd_data = [[39;49m
[0;32m     99[0m [38;5;124;43m            [item[0], item[1], item[2], float(f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{item[3]:.2f}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)][39;49m
[0;32m    100[0m [38;5;124;43m            for item in chd_data_converted[39;49m
[0;32m    101[0m [38;5;124;43m    ][39;49m
[0;32m    102[0m [38;5;124;43m    [39;49m
[0;32m    103[0m [38;5;124;43m        # Assuming [39;49m[38;5;124;43m'[39;49m[38;5;124;43mgwf[39;49m[38;5;124;43m'[39;49m[38;5;124;43m is your groundwater flow model instance[39;49m
[0;32m    104[0m [38;5;124;43m        flopy.mf6.ModflowGwfchd([39;49m
[0;32m    105[0m [38;5;124;43m            gwf,[39;49m
[0;32m    106[0m [38;5;124;43m            maxbound=len(formatted_chd_data),  # Set to actual assigned CHD cells[39;49m
[0;32m    107[0m [38;5;124;43m            stress_period_data=[39;49m[38;5;124;43m{[39;49m[38;5;124;43m0: formatted_chd_data},  # Apply the boundary conditions in stress period 0[39;49m
[0;32m    108[0m [38;5;124;43m            pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mCHD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    109[0m [38;5;124;43m            save_flows=True,[39;49m
[0;32m    110[0m [38;5;124;43m            filename=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{gwf_name}[39;49;00m[38;5;124;43m.chd[39;49m[38;5;124;43m"[39;49m
[0;32m    111[0m [38;5;124;43m        )[39;49m
[0;32m    112[0m 
[0;32m    113[0m [38;5;124;43m    print(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m✅ Assigned [39;49m[38;5;124;43m{[39;49m[38;5;124;43mlen(formatted_chd_data)} unique CHD boundary cells.[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    114[0m 
[0;32m    115[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt output control package[39;49m
[0;32m    116[0m [38;5;124;43m    saverecord = [([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHEAD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mALL[39;49m[38;5;124;43m"[39;49m[38;5;124;43m), ([39;49m[38;5;124;43m"[39;49m[38;5;124;43mBUDGET[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mALL[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)][39;49m
[0;32m    117[0m [38;5;124;43m    printrecord = [([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHEAD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mLAST[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)][39;49m
[0;32m    118[0m [38;5;124;43m    flopy.mf6.ModflowGwfoc([39;49m
[0;32m    119[0m [38;5;124;43m        gwf,[39;49m
[0;32m    120[0m [38;5;124;43m        saverecord=saverecord,[39;49m
[0;32m    121[0m [38;5;124;43m        head_filerecord=head_filerecord,[39;49m
[0;32m    122[0m [38;5;124;43m        budget_filerecord=budget_filerecord,[39;49m
[0;32m    123[0m [38;5;124;43m        printrecord=printrecord,[39;49m
[0;32m    124[0m [38;5;124;43m    )[39;49m
[0;32m    125[0m [38;5;124;43m    return gwfsim, gwf[39;49m
[0;32m    126[0m 
[0;32m    127[0m [38;5;124;43mprint([39;49m[38;5;124;43m"[39;49m[38;5;124;43m✅ build_gwf_model function saved successfully.[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    128[0m [38;5;124;43m"""[39;49m[43m)[49m

File [1;32mC:\Program Files\Python311\Lib\encodings\cp1252.py:19[0m, in [0;36mIncrementalEncoder.encode[1;34m(self, input, final)[0m
[0;32m     18[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mencode[39m([38;5;28mself[39m, [38;5;28minput[39m, final[38;5;241m=[39m[38;5;28;01mFalse[39;00m):
[1;32m---> 19[0m     [38;5;28;01mreturn[39;00m [43mcodecs[49m[38;5;241;43m.[39;49m[43mcharmap_encode[49m[43m([49m[38;5;28;43minput[39;49m[43m,[49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43merrors[49m[43m,[49m[43mencoding_table[49m[43m)[49m[[38;5;241m0[39m]

[1;31mUnicodeEncodeError[0m: 'charmap' codec can't encode character '\u274c' in position 3493: character maps to <undefined>

