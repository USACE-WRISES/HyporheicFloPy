Traceback (most recent call last):
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#---------------------- Groundwater Model Plotting ------------------------#
# Save the function to a file
with open('plot_gwf_model.py', 'w') as f:
    f.write("""
import flopy
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import LightSource

def load_head():
    # Assuming you have a head file to load
    head_file = gwf_ws / headfile
    head_obj = flopy.utils.HeadFile(head_file)
    head = head_obj.get_data()
    return head

def plot_gwf_all(gwfsim):
    # get gwf model
    gwf = gwfsim.get_model(gwf_name)
    head = load_head()

    # Load the discretization file to access model grid information
    dis = gwf.get_package("DIS")
    nlay, nrow, ncol = dis.nlay.data, dis.nrow.data, dis.ncol.data

    # Load the idomain array to identify active cells
    idomain = dis.idomain.array # No results will be visible otherwise

    # Choose the layer you want to plot, e.g., the first layer (layer 0)
    layer_to_plot = 1  # You can change this to any other layer (0-based index)

    # Extract the groundwater head for the specified layer (nrow, ncol)
    head_layer = head[layer_to_plot, :, :]

    # Mask the inactive cells in the head_layer array
    head_layer_masked = np.ma.masked_where(idomain[layer_to_plot, :, :] == 0, head_layer)

    # Plot the groundwater head for the chosen layer
    plt.figure(figsize=(10, 6))
    plt.imshow(head_layer_masked, cmap='viridis', origin='lower', extent=[0, ncol, 0, nrow])
    plt.colorbar(label='Groundwater Head (m)')
    plt.title(f'Groundwater Head at Layer {layer_to_plot + 1}')
    plt.xlabel('Column')
    plt.ylabel('Row')
    plt.show()

    # Load the surface elevation data
    surface_elevation = dis.top.array

    # Choose the layers you want to plot, e.g., the first layer (layer 0) and the last layer
    layer_to_plot_first = 0  # First layer (0-based index)
    layer_to_plot_last = nlay - 1  # Last layer (0-based index)

    # Extract the groundwater head for the specified layers (nrow, ncol)
    head_layer_first = head[layer_to_plot_first, :, :]
    head_layer_last = head[layer_to_plot_last, :, :]

    # Mask the inactive cells in the head_layer arrays
    head_layer_first_masked = np.ma.masked_where(idomain[layer_to_plot_first, :, :] == 0, head_layer_first)
    head_layer_last_masked = np.ma.masked_where(idomain[layer_to_plot_last, :, :] == 0, head_layer_last)

    # Plot the surface elevation for active cells and overlay groundwater head contours
    fig, axs = plt.subplots(1, 2, figsize=(20, 10))

    # Plot for the first layer
    top_active_first = np.ma.masked_where(idomain[layer_to_plot_first, :, :] == 0, surface_elevation)
    im1 = axs[0].imshow(top_active_first, cmap="terrain", interpolation="nearest", origin="lower",
                        extent=[0, ncol, 0, nrow], alpha=0.7)
    plt.colorbar(im1, ax=axs[0], label='Surface Elevation (m)')

    # Check if the minimum and maximum values are different before creating contour levels
    if head_layer_first_masked.min() != head_layer_first_masked.max():
        contour_first = axs[0].contour(head_layer_first_masked, levels=np.linspace(head_layer_first_masked.min(), head_layer_first_masked.max(), 10), colors='blue', extent=[0, ncol, 0, nrow])
        axs[0].clabel(contour_first, inline=True, fontsize=8, fmt='%1.1f')
    axs[0].set_title(f'Surface Elevation and Groundwater Head Contours at Layer {layer_to_plot_first + 1}')
    axs[0].set_xlabel('Column')
    axs[0].set_ylabel('Row')

    # Plot for the last layer
    top_active_last = np.ma.masked_where(idomain[layer_to_plot_last, :, :] == 0, surface_elevation)
    im2 = axs[1].imshow(top_active_last, cmap="terrain", interpolation="nearest", origin="lower",
                        extent=[0, ncol, 0, nrow], alpha=0.7)
    plt.colorbar(im2, ax=axs[1], label='Surface Elevation (m)')

    # Check if the minimum and maximum values are different before creating contour levels
    if head_layer_last_masked.min() != head_layer_last_masked.max():
        contour_last = axs[1].contour(head_layer_last_masked, levels=np.linspace(head_layer_last_masked.min(), head_layer_last_masked.max(), 10), colors='blue', extent=[0, ncol, 0, nrow])
        axs[1].clabel(contour_last, inline=True, fontsize=8, fmt='%1.1f')
    axs[1].set_title(f'Surface Elevation and Groundwater Head Contours at Layer {layer_to_plot_last + 1}')
    axs[1].set_xlabel('Column')
    axs[1].set_ylabel('Row')

    plt.tight_layout()
    plt.show()

    #---------------------- Zoom In to idomain ------------------------#
    # Choose the layers you want to plot
    layers_to_plot = [1, 19, 39]  # 1st, 20th, and 40th layers (0-based index)

    # Extract the groundwater head for the specified layers (nrow, ncol)
    head_layers = [head[layer, :, :] for layer in layers_to_plot]

    # Mask the inactive cells in the head_layer arrays
    head_layers_masked = [np.ma.masked_where(idomain[layer, :, :] == 0, head_layers[i]) for i, layer in enumerate(layers_to_plot)]

    # Determine the extent of the active cells
    active_cells = np.any(idomain, axis=0)
    active_rows, active_cols = np.where(active_cells)
    row_min, row_max = active_rows.min(), active_rows.max()
    col_min, col_max = active_cols.min(), active_cols.max()

    # Define the extent for the plots
    extent = [col_min, col_max + 1, row_min, row_max + 1]

    # Plot the surface elevation for active cells and overlay groundwater head contours
    fig, axs = plt.subplots(3, 1, figsize=(10, 30))

    for i, layer in enumerate(layers_to_plot):
        # Plot for each layer
        top_active = np.ma.masked_where(idomain[layer, :, :] == 0, surface_elevation)
        im = axs[i].imshow(top_active[row_min:row_max+1, col_min:col_max+1], cmap="terrain", interpolation="nearest", origin="lower",
                           extent=extent, alpha=0.7)
        plt.colorbar(im, ax=axs[i], label='Surface Elevation (m)')
        contour = axs[i].contour(head_layers_masked[i][row_min:row_max+1, col_min:col_max+1], levels=np.linspace(head_layers_masked[i].min(), head_layers_masked[i].max(), 10), colors='blue', extent=extent)
        axs[i].clabel(contour, inline=True, fontsize=8, fmt='%1.1f')
        axs[i].set_title(f'Surface Elevation and Groundwater Head Contours at Layer {layer + 1}')
        axs[i].set_xlabel('Column')
        axs[i].set_ylabel('Row')

    plt.tight_layout()
    plt.show()

    #---------------------- 3D Plot of the Model ------------------------#
    top = dis.top.array
    botm = dis.botm.array
    idomain = dis.idomain.array  # Assuming idomain is part of the dis object

    # Combine top and botm to get the elevation data for all layers
    elevation_data = np.concatenate(([top], botm), axis=0)

    # Get the number of rows and columns
    nrows, ncols = top.shape

    # Layer to plot for terrain
    terrain_layer = 0

    # Create a meshgrid for x and y coordinates
    x = np.linspace(0, ncols - 1, ncols)
    y = np.linspace(0, nrows - 1, nrows)
    x, y = np.meshgrid(x, y)

    # Mask the elevation data using the idomain array
    #z = np.ma.masked_where(idomain[terrain_layer, :, :] == 0, elevation_data[terrain_layer, :, :])

    # Set up plot
    fig, ax = plt.subplots(subplot_kw=dict(projection='3d'))

    # Light source for hillshading
    ls = LightSource(270, 45)

    # Plot the masked elevation data
    z = elevation_data[terrain_layer, :, :]
    rgb = ls.shade(z, cmap=cm.gist_earth, vert_exag=0.1, blend_mode='soft')
    surf = ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=rgb,
                        linewidth=0, antialiased=False, shade=False)

    # Set plot labels and title
    ax.set_title('3D Terrain Elevation')
    ax.set_xlabel('Column')
    ax.set_ylabel('Row')
    ax.set_zlabel('Elevation (ft)')

    plt.show()

print("âœ… plot_gwf_all function saved successfully.")
""")

## Code from:
# https://github.com/matplotlib/matplotlib/tree/cfe5bf75eaf378b9523830908036f2123acfe4e7/examples/frontpage/3D.py
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mUnicodeEncodeError[0m                        Traceback (most recent call last)
Cell [1;32mIn[1], line 4[0m
[0;32m      1[0m [38;5;66;03m#---------------------- Groundwater Model Plotting ------------------------#[39;00m
[0;32m      2[0m [38;5;66;03m# Save the function to a file[39;00m
[0;32m      3[0m [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;124m'[39m[38;5;124mplot_gwf_model.py[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mw[39m[38;5;124m'[39m) [38;5;28;01mas[39;00m f:
[1;32m----> 4[0m     [43mf[49m[38;5;241;43m.[39;49m[43mwrite[49m[43m([49m[38;5;124;43m"""[39;49m
[0;32m      5[0m [38;5;124;43mimport flopy[39;49m
[0;32m      6[0m [38;5;124;43mimport numpy as np[39;49m
[0;32m      7[0m [38;5;124;43mimport matplotlib.pyplot as plt[39;49m
[0;32m      8[0m [38;5;124;43mimport matplotlib.cm as cm[39;49m
[0;32m      9[0m [38;5;124;43mfrom mpl_toolkits.mplot3d import Axes3D[39;49m
[0;32m     10[0m [38;5;124;43mfrom matplotlib.colors import LightSource[39;49m
[0;32m     11[0m 
[0;32m     12[0m [38;5;124;43mdef load_head():[39;49m
[0;32m     13[0m [38;5;124;43m    # Assuming you have a head file to load[39;49m
[0;32m     14[0m [38;5;124;43m    head_file = gwf_ws / headfile[39;49m
[0;32m     15[0m [38;5;124;43m    head_obj = flopy.utils.HeadFile(head_file)[39;49m
[0;32m     16[0m [38;5;124;43m    head = head_obj.get_data()[39;49m
[0;32m     17[0m [38;5;124;43m    return head[39;49m
[0;32m     18[0m 
[0;32m     19[0m [38;5;124;43mdef plot_gwf_all(gwfsim):[39;49m
[0;32m     20[0m [38;5;124;43m    # get gwf model[39;49m
[0;32m     21[0m [38;5;124;43m    gwf = gwfsim.get_model(gwf_name)[39;49m
[0;32m     22[0m [38;5;124;43m    head = load_head()[39;49m
[0;32m     23[0m 
[0;32m     24[0m [38;5;124;43m    # Load the discretization file to access model grid information[39;49m
[0;32m     25[0m [38;5;124;43m    dis = gwf.get_package([39;49m[38;5;124;43m"[39;49m[38;5;124;43mDIS[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m     26[0m [38;5;124;43m    nlay, nrow, ncol = dis.nlay.data, dis.nrow.data, dis.ncol.data[39;49m
[0;32m     27[0m 
[0;32m     28[0m [38;5;124;43m    # Load the idomain array to identify active cells[39;49m
[0;32m     29[0m [38;5;124;43m    idomain = dis.idomain.array # No results will be visible otherwise[39;49m
[0;32m     30[0m 
[0;32m     31[0m [38;5;124;43m    # Choose the layer you want to plot, e.g., the first layer (layer 0)[39;49m
[0;32m     32[0m [38;5;124;43m    layer_to_plot = 1  # You can change this to any other layer (0-based index)[39;49m
[0;32m     33[0m 
[0;32m     34[0m [38;5;124;43m    # Extract the groundwater head for the specified layer (nrow, ncol)[39;49m
[0;32m     35[0m [38;5;124;43m    head_layer = head[layer_to_plot, :, :][39;49m
[0;32m     36[0m 
[0;32m     37[0m [38;5;124;43m    # Mask the inactive cells in the head_layer array[39;49m
[0;32m     38[0m [38;5;124;43m    head_layer_masked = np.ma.masked_where(idomain[layer_to_plot, :, :] == 0, head_layer)[39;49m
[0;32m     39[0m 
[0;32m     40[0m [38;5;124;43m    # Plot the groundwater head for the chosen layer[39;49m
[0;32m     41[0m [38;5;124;43m    plt.figure(figsize=(10, 6))[39;49m
[0;32m     42[0m [38;5;124;43m    plt.imshow(head_layer_masked, cmap=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mviridis[39;49m[38;5;124;43m'[39;49m[38;5;124;43m, origin=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mlower[39;49m[38;5;124;43m'[39;49m[38;5;124;43m, extent=[0, ncol, 0, nrow])[39;49m
[0;32m     43[0m [38;5;124;43m    plt.colorbar(label=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mGroundwater Head (m)[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     44[0m [38;5;124;43m    plt.title(f[39;49m[38;5;124;43m'[39;49m[38;5;124;43mGroundwater Head at Layer [39;49m[38;5;124;43m{[39;49m[38;5;124;43mlayer_to_plot + 1}[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     45[0m [38;5;124;43m    plt.xlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mColumn[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     46[0m [38;5;124;43m    plt.ylabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mRow[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     47[0m [38;5;124;43m    plt.show()[39;49m
[0;32m     48[0m 
[0;32m     49[0m [38;5;124;43m    # Load the surface elevation data[39;49m
[0;32m     50[0m [38;5;124;43m    surface_elevation = dis.top.array[39;49m
[0;32m     51[0m 
[0;32m     52[0m [38;5;124;43m    # Choose the layers you want to plot, e.g., the first layer (layer 0) and the last layer[39;49m
[0;32m     53[0m [38;5;124;43m    layer_to_plot_first = 0  # First layer (0-based index)[39;49m
[0;32m     54[0m [38;5;124;43m    layer_to_plot_last = nlay - 1  # Last layer (0-based index)[39;49m
[0;32m     55[0m 
[0;32m     56[0m [38;5;124;43m    # Extract the groundwater head for the specified layers (nrow, ncol)[39;49m
[0;32m     57[0m [38;5;124;43m    head_layer_first = head[layer_to_plot_first, :, :][39;49m
[0;32m     58[0m [38;5;124;43m    head_layer_last = head[layer_to_plot_last, :, :][39;49m
[0;32m     59[0m 
[0;32m     60[0m [38;5;124;43m    # Mask the inactive cells in the head_layer arrays[39;49m
[0;32m     61[0m [38;5;124;43m    head_layer_first_masked = np.ma.masked_where(idomain[layer_to_plot_first, :, :] == 0, head_layer_first)[39;49m
[0;32m     62[0m [38;5;124;43m    head_layer_last_masked = np.ma.masked_where(idomain[layer_to_plot_last, :, :] == 0, head_layer_last)[39;49m
[0;32m     63[0m 
[0;32m     64[0m [38;5;124;43m    # Plot the surface elevation for active cells and overlay groundwater head contours[39;49m
[0;32m     65[0m [38;5;124;43m    fig, axs = plt.subplots(1, 2, figsize=(20, 10))[39;49m
[0;32m     66[0m 
[0;32m     67[0m [38;5;124;43m    # Plot for the first layer[39;49m
[0;32m     68[0m [38;5;124;43m    top_active_first = np.ma.masked_where(idomain[layer_to_plot_first, :, :] == 0, surface_elevation)[39;49m
[0;32m     69[0m [38;5;124;43m    im1 = axs[0].imshow(top_active_first, cmap=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mterrain[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, interpolation=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mnearest[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, origin=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mlower[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     70[0m [38;5;124;43m                        extent=[0, ncol, 0, nrow], alpha=0.7)[39;49m
[0;32m     71[0m [38;5;124;43m    plt.colorbar(im1, ax=axs[0], label=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation (m)[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     72[0m 
[0;32m     73[0m [38;5;124;43m    # Check if the minimum and maximum values are different before creating contour levels[39;49m
[0;32m     74[0m [38;5;124;43m    if head_layer_first_masked.min() != head_layer_first_masked.max():[39;49m
[0;32m     75[0m [38;5;124;43m        contour_first = axs[0].contour(head_layer_first_masked, levels=np.linspace(head_layer_first_masked.min(), head_layer_first_masked.max(), 10), colors=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mblue[39;49m[38;5;124;43m'[39;49m[38;5;124;43m, extent=[0, ncol, 0, nrow])[39;49m
[0;32m     76[0m [38;5;124;43m        axs[0].clabel(contour_first, inline=True, fontsize=8, fmt=[39;49m[38;5;124;43m'[39;49m[38;5;132;43;01m%1.1f[39;49;00m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     77[0m [38;5;124;43m    axs[0].set_title(f[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation and Groundwater Head Contours at Layer [39;49m[38;5;124;43m{[39;49m[38;5;124;43mlayer_to_plot_first + 1}[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     78[0m [38;5;124;43m    axs[0].set_xlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mColumn[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     79[0m [38;5;124;43m    axs[0].set_ylabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mRow[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     80[0m 
[0;32m     81[0m [38;5;124;43m    # Plot for the last layer[39;49m
[0;32m     82[0m [38;5;124;43m    top_active_last = np.ma.masked_where(idomain[layer_to_plot_last, :, :] == 0, surface_elevation)[39;49m
[0;32m     83[0m [38;5;124;43m    im2 = axs[1].imshow(top_active_last, cmap=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mterrain[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, interpolation=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mnearest[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, origin=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mlower[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     84[0m [38;5;124;43m                        extent=[0, ncol, 0, nrow], alpha=0.7)[39;49m
[0;32m     85[0m [38;5;124;43m    plt.colorbar(im2, ax=axs[1], label=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation (m)[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     86[0m 
[0;32m     87[0m [38;5;124;43m    # Check if the minimum and maximum values are different before creating contour levels[39;49m
[0;32m     88[0m [38;5;124;43m    if head_layer_last_masked.min() != head_layer_last_masked.max():[39;49m
[0;32m     89[0m [38;5;124;43m        contour_last = axs[1].contour(head_layer_last_masked, levels=np.linspace(head_layer_last_masked.min(), head_layer_last_masked.max(), 10), colors=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mblue[39;49m[38;5;124;43m'[39;49m[38;5;124;43m, extent=[0, ncol, 0, nrow])[39;49m
[0;32m     90[0m [38;5;124;43m        axs[1].clabel(contour_last, inline=True, fontsize=8, fmt=[39;49m[38;5;124;43m'[39;49m[38;5;132;43;01m%1.1f[39;49;00m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     91[0m [38;5;124;43m    axs[1].set_title(f[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation and Groundwater Head Contours at Layer [39;49m[38;5;124;43m{[39;49m[38;5;124;43mlayer_to_plot_last + 1}[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     92[0m [38;5;124;43m    axs[1].set_xlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mColumn[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     93[0m [38;5;124;43m    axs[1].set_ylabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mRow[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m     94[0m 
[0;32m     95[0m [38;5;124;43m    plt.tight_layout()[39;49m
[0;32m     96[0m [38;5;124;43m    plt.show()[39;49m
[0;32m     97[0m 
[0;32m     98[0m [38;5;124;43m    #---------------------- Zoom In to idomain ------------------------#[39;49m
[0;32m     99[0m [38;5;124;43m    # Choose the layers you want to plot[39;49m
[0;32m    100[0m [38;5;124;43m    layers_to_plot = [1, 19, 39]  # 1st, 20th, and 40th layers (0-based index)[39;49m
[0;32m    101[0m 
[0;32m    102[0m [38;5;124;43m    # Extract the groundwater head for the specified layers (nrow, ncol)[39;49m
[0;32m    103[0m [38;5;124;43m    head_layers = [head[layer, :, :] for layer in layers_to_plot][39;49m
[0;32m    104[0m 
[0;32m    105[0m [38;5;124;43m    # Mask the inactive cells in the head_layer arrays[39;49m
[0;32m    106[0m [38;5;124;43m    head_layers_masked = [np.ma.masked_where(idomain[layer, :, :] == 0, head_layers[i]) for i, layer in enumerate(layers_to_plot)][39;49m
[0;32m    107[0m 
[0;32m    108[0m [38;5;124;43m    # Determine the extent of the active cells[39;49m
[0;32m    109[0m [38;5;124;43m    active_cells = np.any(idomain, axis=0)[39;49m
[0;32m    110[0m [38;5;124;43m    active_rows, active_cols = np.where(active_cells)[39;49m
[0;32m    111[0m [38;5;124;43m    row_min, row_max = active_rows.min(), active_rows.max()[39;49m
[0;32m    112[0m [38;5;124;43m    col_min, col_max = active_cols.min(), active_cols.max()[39;49m
[0;32m    113[0m 
[0;32m    114[0m [38;5;124;43m    # Define the extent for the plots[39;49m
[0;32m    115[0m [38;5;124;43m    extent = [col_min, col_max + 1, row_min, row_max + 1][39;49m
[0;32m    116[0m 
[0;32m    117[0m [38;5;124;43m    # Plot the surface elevation for active cells and overlay groundwater head contours[39;49m
[0;32m    118[0m [38;5;124;43m    fig, axs = plt.subplots(3, 1, figsize=(10, 30))[39;49m
[0;32m    119[0m 
[0;32m    120[0m [38;5;124;43m    for i, layer in enumerate(layers_to_plot):[39;49m
[0;32m    121[0m [38;5;124;43m        # Plot for each layer[39;49m
[0;32m    122[0m [38;5;124;43m        top_active = np.ma.masked_where(idomain[layer, :, :] == 0, surface_elevation)[39;49m
[0;32m    123[0m [38;5;124;43m        im = axs[i].imshow(top_active[row_min:row_max+1, col_min:col_max+1], cmap=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mterrain[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, interpolation=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mnearest[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, origin=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mlower[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    124[0m [38;5;124;43m                           extent=extent, alpha=0.7)[39;49m
[0;32m    125[0m [38;5;124;43m        plt.colorbar(im, ax=axs[i], label=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation (m)[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    126[0m [38;5;124;43m        contour = axs[i].contour(head_layers_masked[i][row_min:row_max+1, col_min:col_max+1], levels=np.linspace(head_layers_masked[i].min(), head_layers_masked[i].max(), 10), colors=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mblue[39;49m[38;5;124;43m'[39;49m[38;5;124;43m, extent=extent)[39;49m
[0;32m    127[0m [38;5;124;43m        axs[i].clabel(contour, inline=True, fontsize=8, fmt=[39;49m[38;5;124;43m'[39;49m[38;5;132;43;01m%1.1f[39;49;00m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    128[0m [38;5;124;43m        axs[i].set_title(f[39;49m[38;5;124;43m'[39;49m[38;5;124;43mSurface Elevation and Groundwater Head Contours at Layer [39;49m[38;5;124;43m{[39;49m[38;5;124;43mlayer + 1}[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    129[0m [38;5;124;43m        axs[i].set_xlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mColumn[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    130[0m [38;5;124;43m        axs[i].set_ylabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mRow[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    131[0m 
[0;32m    132[0m [38;5;124;43m    plt.tight_layout()[39;49m
[0;32m    133[0m [38;5;124;43m    plt.show()[39;49m
[0;32m    134[0m 
[0;32m    135[0m [38;5;124;43m    #---------------------- 3D Plot of the Model ------------------------#[39;49m
[0;32m    136[0m [38;5;124;43m    top = dis.top.array[39;49m
[0;32m    137[0m [38;5;124;43m    botm = dis.botm.array[39;49m
[0;32m    138[0m [38;5;124;43m    idomain = dis.idomain.array  # Assuming idomain is part of the dis object[39;49m
[0;32m    139[0m 
[0;32m    140[0m [38;5;124;43m    # Combine top and botm to get the elevation data for all layers[39;49m
[0;32m    141[0m [38;5;124;43m    elevation_data = np.concatenate(([top], botm), axis=0)[39;49m
[0;32m    142[0m 
[0;32m    143[0m [38;5;124;43m    # Get the number of rows and columns[39;49m
[0;32m    144[0m [38;5;124;43m    nrows, ncols = top.shape[39;49m
[0;32m    145[0m 
[0;32m    146[0m [38;5;124;43m    # Layer to plot for terrain[39;49m
[0;32m    147[0m [38;5;124;43m    terrain_layer = 0[39;49m
[0;32m    148[0m 
[0;32m    149[0m [38;5;124;43m    # Create a meshgrid for x and y coordinates[39;49m
[0;32m    150[0m [38;5;124;43m    x = np.linspace(0, ncols - 1, ncols)[39;49m
[0;32m    151[0m [38;5;124;43m    y = np.linspace(0, nrows - 1, nrows)[39;49m
[0;32m    152[0m [38;5;124;43m    x, y = np.meshgrid(x, y)[39;49m
[0;32m    153[0m 
[0;32m    154[0m [38;5;124;43m    # Mask the elevation data using the idomain array[39;49m
[0;32m    155[0m [38;5;124;43m    #z = np.ma.masked_where(idomain[terrain_layer, :, :] == 0, elevation_data[terrain_layer, :, :])[39;49m
[0;32m    156[0m 
[0;32m    157[0m [38;5;124;43m    # Set up plot[39;49m
[0;32m    158[0m [38;5;124;43m    fig, ax = plt.subplots(subplot_kw=dict(projection=[39;49m[38;5;124;43m'[39;49m[38;5;124;43m3d[39;49m[38;5;124;43m'[39;49m[38;5;124;43m))[39;49m
[0;32m    159[0m 
[0;32m    160[0m [38;5;124;43m    # Light source for hillshading[39;49m
[0;32m    161[0m [38;5;124;43m    ls = LightSource(270, 45)[39;49m
[0;32m    162[0m 
[0;32m    163[0m [38;5;124;43m    # Plot the masked elevation data[39;49m
[0;32m    164[0m [38;5;124;43m    z = elevation_data[terrain_layer, :, :][39;49m
[0;32m    165[0m [38;5;124;43m    rgb = ls.shade(z, cmap=cm.gist_earth, vert_exag=0.1, blend_mode=[39;49m[38;5;124;43m'[39;49m[38;5;124;43msoft[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    166[0m [38;5;124;43m    surf = ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=rgb,[39;49m
[0;32m    167[0m [38;5;124;43m                        linewidth=0, antialiased=False, shade=False)[39;49m
[0;32m    168[0m 
[0;32m    169[0m [38;5;124;43m    # Set plot labels and title[39;49m
[0;32m    170[0m [38;5;124;43m    ax.set_title([39;49m[38;5;124;43m'[39;49m[38;5;124;43m3D Terrain Elevation[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    171[0m [38;5;124;43m    ax.set_xlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mColumn[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    172[0m [38;5;124;43m    ax.set_ylabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mRow[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    173[0m [38;5;124;43m    ax.set_zlabel([39;49m[38;5;124;43m'[39;49m[38;5;124;43mElevation (ft)[39;49m[38;5;124;43m'[39;49m[38;5;124;43m)[39;49m
[0;32m    174[0m 
[0;32m    175[0m [38;5;124;43m    plt.show()[39;49m
[0;32m    176[0m 
[0;32m    177[0m [38;5;124;43mprint([39;49m[38;5;124;43m"[39;49m[38;5;124;43mâœ… plot_gwf_all function saved successfully.[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    178[0m [38;5;124;43m"""[39;49m[43m)[49m
[0;32m    180[0m [38;5;66;03m## Code from:[39;00m
[0;32m    181[0m [38;5;66;03m# https://github.com/matplotlib/matplotlib/tree/cfe5bf75eaf378b9523830908036f2123acfe4e7/examples/frontpage/3D.py[39;00m

File [1;32mC:\Program Files\Python311\Lib\encodings\cp1252.py:19[0m, in [0;36mIncrementalEncoder.encode[1;34m(self, input, final)[0m
[0;32m     18[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mencode[39m([38;5;28mself[39m, [38;5;28minput[39m, final[38;5;241m=[39m[38;5;28;01mFalse[39;00m):
[1;32m---> 19[0m     [38;5;28;01mreturn[39;00m [43mcodecs[49m[38;5;241;43m.[39;49m[43mcharmap_encode[49m[43m([49m[38;5;28;43minput[39;49m[43m,[49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43merrors[49m[43m,[49m[43mencoding_table[49m[43m)[49m[[38;5;241m0[39m]

[1;31mUnicodeEncodeError[0m: 'charmap' codec can't encode character '\u2705' in position 7865: character maps to <undefined>

