Traceback (most recent call last):
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\Users\u4eeevmq\Documents\Python\HyporheicFloPy\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Save the function to a file
with open('build_particle_models.py', 'w') as f:
    f.write("""
import flopy
import numpy as np
import pathlib as pl

def build_particle_models(example_name, gwf):
    print(f"Building PRT model for {example_name}")

    # Instantiate the MODFLOW 6 PRT simulation object
    prtsim = flopy.mf6.MFSimulation(
        sim_name=prt_name, exe_name=md6_exe_path, version="mf6", sim_ws=prt_ws
    )

    # Instantiate the MODFLOW 6 temporal discretization package
    flopy.mf6.modflow.mftdis.ModflowTdis(
        prtsim,
        pname="tdis",
        time_units="DAYS",
        nper=nper,
        perioddata=[(perlen, nstp, tsmult)],
    )

    # Instantiate the MODFLOW 6 prt model
    prt = flopy.mf6.ModflowPrt(
        prtsim, modelname=prt_name, model_nam_file=f"{prt_name}.nam", save_flows=True
    )

    # Instantiate the MODFLOW 6 prt discretization package
    flopy.mf6.modflow.mfgwfdis.ModflowGwfdis(
        prt,
        pname="dis",
        nlay=len(botm),
        nrow=nrow,
        ncol=ncol,
        length_units="FEET",
        delr=cell_size_x,  # Cell width
        delc=cell_size_y,  # Cell height
        top=tops[0],
        botm=botm,
        idomain=idomain,    # List of dynamically calculated active and inactive cells in the model domain
        xorigin=xorigin,  # Assign dynamically calculated xorigin
        yorigin=yorigin   # Assign dynamically calculated yorigin
    )

    # Instantiate the MODFLOW 6 prt model input package.
    # Assign a different zone number to active cells, well cells, and river cells.
    # # This makes it easier to determine where particles terminate.
    # izone = np.zeros((len(botm), nrow, ncol), dtype=int)
    # for l, r, c in gwf.modelgrid.get_lrc(nodes["well"]):
    #     izone[l, r, c] = 1
    # for l, r, c in gwf.modelgrid.get_lrc(nodes["river"]):
    #     izone[l, r, c] = 2
    flopy.mf6.ModflowPrtmip(prt, pname="mip", porosity= porosity) #izone=izone)

    # Instantiate the MODFLOW 6 prt particle release point (prp) package for example 1A,
    # first converting MP7 particle release configurations to PRT format.
    releasepts_1a = list(mp7_particle_data_1a.to_prp(prt.modelgrid))
    flopy.mf6.ModflowPrtprp(
        prt,
        pname="prp1a",
        filename=f"{prt_name}_1a.prp",
        nreleasepts=len(releasepts_1a),
        packagedata=releasepts_1a,
        perioddata={0: ["FIRST"]},
        exit_solve_tolerance=1e-5,
    )

    # # Instantiate the MODFLOW 6 prt particle release point (prp) package for example 1B,
    # # first converting MP7 particle release configurations to PRT format.
    # releasepts_1b = list(mp7_particle_data_1b.to_prp(prt.modelgrid))
    # flopy.mf6.ModflowPrtprp(
    #     prt,
    #     pname="prp1b",
    #     filename=f"{prt_name}_1b.prp",
    #     nreleasepts=len(releasepts_1b),
    #     packagedata=releasepts_1b,
    #     perioddata={0: ["FIRST"]},
    #     exit_solve_tolerance=1e-10,
    # )

    # Instantiate the MODFLOW 6 prt output control package
    budget_record = [budgetfile_prt]
    track_record = [trackfile_prt]
    trackcsv_record = [trackcsvfile_prt]
    
    #tracktimes = [round(float(i), 2) for i in range(0, 72000, 1000)]  # Convert to non-integer floats and round
    tracktimes = [float(i) for i in range(0, 72000, 1000)]
    ntracktimes = len(tracktimes) 
    
    # Debug print to check tracktimes and ntracktimes
    print("Track times:", tracktimes)
    print("Data type of track times:", type(tracktimes))
    print("Number of track times:", ntracktimes)
    print("Data type of Number of track times:", type(ntracktimes))

    # Dynamically generate file names
    budget_filerecord_prt = [budgetfile_prt]
    track_filerecord_prt = [trackfile_prt]

    # # Create .oc file manually
    # oc_file = "{}.oc".format(prt_name)  # The .oc file name will also be based on prt_name

    # with open(oc_file, 'w') as f:
    #     f.write("OC\n")
    #     f.write("  PRINT HEAD LAST\n")  # Print head for the last time step
    #     f.write("  SAVE HEAD ALL\n")  # Save head for all time steps
    #     f.write("  SAVE BUDGET ALL\n")  # Save budget for all time steps
    #     f.write(f"  BUDGET FILE {budgetfile_prt}\n")  # Use the dynamic budget file
    #     f.write(f"  PRINT FILE {prt_name}_output.dat\n")  # Example print file
    #     f.write(f"  TRACK FILE {trackfile_prt}\n")  # Use the dynamic track file
    #     f.write(f"  TRACKCSV FILE {trackcsvfile_prt}\n")  # Use the dynamic track CSV file
    #     f.write(f"  TRACKHDR FILE {trackhdrfile_prt}\n")  # Use the dynamic track header file
    #     f.write("  NTRACKTIMES 5\n")  # Example: 5 tracking times
    #     f.write("  TRACKTIMES 1.0 2.0 3.0 4.0 5.0\n")  # Example: tracking times

    # flopy.mf6.ModflowPrtoc(
    #     prt,
    #     pname="oc",
    #     budget_filerecord=budget_record,
    #     track_filerecord=track_record,
    #     trackcsv_filerecord=trackcsv_record,
    #     ntracktimes= float(ntracktimes),
    #     tracktimes=[(t,) for t in tracktimes],
    #     saverecord = [("HEAD", "ALL"), ("BUDGET", "ALL")],
    #     printrecord = [("HEAD", "LAST")]
    # )

    # Debug prints to check if the paths exist
    head_path = gwf_ws / headfile
    budget_path = gwf_ws / budgetfile
    print("Head file path:", head_path)
    print("Budget file path:", budget_path)
    print("Head file exists:", head_path.exists())  
    print("Budget file exists:", budget_path.exists())

    # Instantiate the MODFLOW 6 prt flow model interface
    pd = [
        ("GWFHEAD", pl.Path(f"../{gwf_ws.name}/{headfile}")),
        ("GWFBUDGET", pl.Path(f"../{gwf_ws.name}/{budgetfile}")),
    ]
    
    flopy.mf6.ModflowPrtfmi(prt, packagedata=pd)

    # Create an explicit model solution (EMS) for the MODFLOW 6 prt model
    ems = flopy.mf6.ModflowEms(
        prtsim,
        pname="ems",
        filename=f"{prt_name}.ems",
    )
    prtsim.register_solution_package(ems, [prt.name])

    print(f"Building PRT model for {example_name}")
    
    # Instantiate the MODPATH 7 object
    mp7 = flopy.modpath.Modpath7(
        modelname=mp7_name,
        flowmodel=gwf,
        exe_name=md7_exe_path,
        model_ws=mp7_ws,
        budgetfilename=budget_path,
        headfilename=head_path,
    )

    # Instantiate the MODPATH 7 basic data
    flopy.modpath.Modpath7Bas(mp7, porosity=porosity, defaultiface={"RCH": 6, "EVT": 6})

    # Instantiate the MODPATH 7 particle groups
    pg1a = flopy.modpath.ParticleGroup(
        particlegroupname="PG1A",
        particledata=mp7_particle_data_1a,
        filename=sim_name + "a.sloc",
    )
    # pg1b = flopy.modpath.ParticleGroupLRCTemplate(
    #     particlegroupname="PG1B",
    #     particledata=mp7_particle_data_1b,
    #     filename=sim_name + "b.sloc",
    # )

    # Instantiate the MODPATH 7 simulation
    mpsim = flopy.modpath.Modpath7Sim(
        mp7,
        simulationtype="combined",
        trackingdirection="forward",
        weaksinkoption="pass_through",
        weaksourceoption="pass_through",
        budgetoutputoption="summary",
        referencetime=[0, 0, 0.0],
        stoptimeoption="extend",
        timepointdata=[500, 1000.0],
        zonedataoption="on",
        zones=izone,
        particlegroups=[pg1a],
    )
    return prtsim, prt, mpsim, mp7

print("âœ… build_particle_models function saved successfully.")
""")
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mUnicodeEncodeError[0m                        Traceback (most recent call last)
Cell [1;32mIn[1], line 3[0m
[0;32m      1[0m [38;5;66;03m# Save the function to a file[39;00m
[0;32m      2[0m [38;5;28;01mwith[39;00m [38;5;28mopen[39m([38;5;124m'[39m[38;5;124mbuild_particle_models.py[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mw[39m[38;5;124m'[39m) [38;5;28;01mas[39;00m f:
[1;32m----> 3[0m     [43mf[49m[38;5;241;43m.[39;49m[43mwrite[49m[43m([49m[38;5;124;43m"""[39;49m
[0;32m      4[0m [38;5;124;43mimport flopy[39;49m
[0;32m      5[0m [38;5;124;43mimport numpy as np[39;49m
[0;32m      6[0m [38;5;124;43mimport pathlib as pl[39;49m
[0;32m      7[0m 
[0;32m      8[0m [38;5;124;43mdef build_particle_models(example_name, gwf):[39;49m
[0;32m      9[0m [38;5;124;43m    print(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43mBuilding PRT model for [39;49m[38;5;132;43;01m{example_name}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m     10[0m 
[0;32m     11[0m [38;5;124;43m    # Instantiate the MODFLOW 6 PRT simulation object[39;49m
[0;32m     12[0m [38;5;124;43m    prtsim = flopy.mf6.MFSimulation([39;49m
[0;32m     13[0m [38;5;124;43m        sim_name=prt_name, exe_name=md6_exe_path, version=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mmf6[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, sim_ws=prt_ws[39;49m
[0;32m     14[0m [38;5;124;43m    )[39;49m
[0;32m     15[0m 
[0;32m     16[0m [38;5;124;43m    # Instantiate the MODFLOW 6 temporal discretization package[39;49m
[0;32m     17[0m [38;5;124;43m    flopy.mf6.modflow.mftdis.ModflowTdis([39;49m
[0;32m     18[0m [38;5;124;43m        prtsim,[39;49m
[0;32m     19[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mtdis[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     20[0m [38;5;124;43m        time_units=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mDAYS[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     21[0m [38;5;124;43m        nper=nper,[39;49m
[0;32m     22[0m [38;5;124;43m        perioddata=[(perlen, nstp, tsmult)],[39;49m
[0;32m     23[0m [38;5;124;43m    )[39;49m
[0;32m     24[0m 
[0;32m     25[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt model[39;49m
[0;32m     26[0m [38;5;124;43m    prt = flopy.mf6.ModflowPrt([39;49m
[0;32m     27[0m [38;5;124;43m        prtsim, modelname=prt_name, model_nam_file=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{prt_name}[39;49;00m[38;5;124;43m.nam[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, save_flows=True[39;49m
[0;32m     28[0m [38;5;124;43m    )[39;49m
[0;32m     29[0m 
[0;32m     30[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt discretization package[39;49m
[0;32m     31[0m [38;5;124;43m    flopy.mf6.modflow.mfgwfdis.ModflowGwfdis([39;49m
[0;32m     32[0m [38;5;124;43m        prt,[39;49m
[0;32m     33[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mdis[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     34[0m [38;5;124;43m        nlay=len(botm),[39;49m
[0;32m     35[0m [38;5;124;43m        nrow=nrow,[39;49m
[0;32m     36[0m [38;5;124;43m        ncol=ncol,[39;49m
[0;32m     37[0m [38;5;124;43m        length_units=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mFEET[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     38[0m [38;5;124;43m        delr=cell_size_x,  # Cell width[39;49m
[0;32m     39[0m [38;5;124;43m        delc=cell_size_y,  # Cell height[39;49m
[0;32m     40[0m [38;5;124;43m        top=tops[0],[39;49m
[0;32m     41[0m [38;5;124;43m        botm=botm,[39;49m
[0;32m     42[0m [38;5;124;43m        idomain=idomain,    # List of dynamically calculated active and inactive cells in the model domain[39;49m
[0;32m     43[0m [38;5;124;43m        xorigin=xorigin,  # Assign dynamically calculated xorigin[39;49m
[0;32m     44[0m [38;5;124;43m        yorigin=yorigin   # Assign dynamically calculated yorigin[39;49m
[0;32m     45[0m [38;5;124;43m    )[39;49m
[0;32m     46[0m 
[0;32m     47[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt model input package.[39;49m
[0;32m     48[0m [38;5;124;43m    # Assign a different zone number to active cells, well cells, and river cells.[39;49m
[0;32m     49[0m [38;5;124;43m    # # This makes it easier to determine where particles terminate.[39;49m
[0;32m     50[0m [38;5;124;43m    # izone = np.zeros((len(botm), nrow, ncol), dtype=int)[39;49m
[0;32m     51[0m [38;5;124;43m    # for l, r, c in gwf.modelgrid.get_lrc(nodes[[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwell[39;49m[38;5;124;43m"[39;49m[38;5;124;43m]):[39;49m
[0;32m     52[0m [38;5;124;43m    #     izone[l, r, c] = 1[39;49m
[0;32m     53[0m [38;5;124;43m    # for l, r, c in gwf.modelgrid.get_lrc(nodes[[39;49m[38;5;124;43m"[39;49m[38;5;124;43mriver[39;49m[38;5;124;43m"[39;49m[38;5;124;43m]):[39;49m
[0;32m     54[0m [38;5;124;43m    #     izone[l, r, c] = 2[39;49m
[0;32m     55[0m [38;5;124;43m    flopy.mf6.ModflowPrtmip(prt, pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mmip[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, porosity= porosity) #izone=izone)[39;49m
[0;32m     56[0m 
[0;32m     57[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt particle release point (prp) package for example 1A,[39;49m
[0;32m     58[0m [38;5;124;43m    # first converting MP7 particle release configurations to PRT format.[39;49m
[0;32m     59[0m [38;5;124;43m    releasepts_1a = list(mp7_particle_data_1a.to_prp(prt.modelgrid))[39;49m
[0;32m     60[0m [38;5;124;43m    flopy.mf6.ModflowPrtprp([39;49m
[0;32m     61[0m [38;5;124;43m        prt,[39;49m
[0;32m     62[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mprp1a[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     63[0m [38;5;124;43m        filename=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{prt_name}[39;49;00m[38;5;124;43m_1a.prp[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     64[0m [38;5;124;43m        nreleasepts=len(releasepts_1a),[39;49m
[0;32m     65[0m [38;5;124;43m        packagedata=releasepts_1a,[39;49m
[0;32m     66[0m [38;5;124;43m        perioddata=[39;49m[38;5;124;43m{[39;49m[38;5;124;43m0: [[39;49m[38;5;124;43m"[39;49m[38;5;124;43mFIRST[39;49m[38;5;124;43m"[39;49m[38;5;124;43m]},[39;49m
[0;32m     67[0m [38;5;124;43m        exit_solve_tolerance=1e-5,[39;49m
[0;32m     68[0m [38;5;124;43m    )[39;49m
[0;32m     69[0m 
[0;32m     70[0m [38;5;124;43m    # # Instantiate the MODFLOW 6 prt particle release point (prp) package for example 1B,[39;49m
[0;32m     71[0m [38;5;124;43m    # # first converting MP7 particle release configurations to PRT format.[39;49m
[0;32m     72[0m [38;5;124;43m    # releasepts_1b = list(mp7_particle_data_1b.to_prp(prt.modelgrid))[39;49m
[0;32m     73[0m [38;5;124;43m    # flopy.mf6.ModflowPrtprp([39;49m
[0;32m     74[0m [38;5;124;43m    #     prt,[39;49m
[0;32m     75[0m [38;5;124;43m    #     pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mprp1b[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     76[0m [38;5;124;43m    #     filename=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{prt_name}[39;49;00m[38;5;124;43m_1b.prp[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m     77[0m [38;5;124;43m    #     nreleasepts=len(releasepts_1b),[39;49m
[0;32m     78[0m [38;5;124;43m    #     packagedata=releasepts_1b,[39;49m
[0;32m     79[0m [38;5;124;43m    #     perioddata=[39;49m[38;5;124;43m{[39;49m[38;5;124;43m0: [[39;49m[38;5;124;43m"[39;49m[38;5;124;43mFIRST[39;49m[38;5;124;43m"[39;49m[38;5;124;43m]},[39;49m
[0;32m     80[0m [38;5;124;43m    #     exit_solve_tolerance=1e-10,[39;49m
[0;32m     81[0m [38;5;124;43m    # )[39;49m
[0;32m     82[0m 
[0;32m     83[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt output control package[39;49m
[0;32m     84[0m [38;5;124;43m    budget_record = [budgetfile_prt][39;49m
[0;32m     85[0m [38;5;124;43m    track_record = [trackfile_prt][39;49m
[0;32m     86[0m [38;5;124;43m    trackcsv_record = [trackcsvfile_prt][39;49m
[0;32m     87[0m [38;5;124;43m    [39;49m
[0;32m     88[0m [38;5;124;43m    #tracktimes = [round(float(i), 2) for i in range(0, 72000, 1000)]  # Convert to non-integer floats and round[39;49m
[0;32m     89[0m [38;5;124;43m    tracktimes = [float(i) for i in range(0, 72000, 1000)][39;49m
[0;32m     90[0m [38;5;124;43m    ntracktimes = len(tracktimes) [39;49m
[0;32m     91[0m [38;5;124;43m    [39;49m
[0;32m     92[0m [38;5;124;43m    # Debug print to check tracktimes and ntracktimes[39;49m
[0;32m     93[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mTrack times:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, tracktimes)[39;49m
[0;32m     94[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mData type of track times:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, type(tracktimes))[39;49m
[0;32m     95[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mNumber of track times:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, ntracktimes)[39;49m
[0;32m     96[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mData type of Number of track times:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, type(ntracktimes))[39;49m
[0;32m     97[0m 
[0;32m     98[0m [38;5;124;43m    # Dynamically generate file names[39;49m
[0;32m     99[0m [38;5;124;43m    budget_filerecord_prt = [budgetfile_prt][39;49m
[0;32m    100[0m [38;5;124;43m    track_filerecord_prt = [trackfile_prt][39;49m
[0;32m    101[0m 
[0;32m    102[0m [38;5;124;43m    # # Create .oc file manually[39;49m
[0;32m    103[0m [38;5;124;43m    # oc_file = [39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{}[39;49;00m[38;5;124;43m.oc[39;49m[38;5;124;43m"[39;49m[38;5;124;43m.format(prt_name)  # The .oc file name will also be based on prt_name[39;49m
[0;32m    104[0m 
[0;32m    105[0m [38;5;124;43m    # with open(oc_file, [39;49m[38;5;124;43m'[39;49m[38;5;124;43mw[39;49m[38;5;124;43m'[39;49m[38;5;124;43m) as f:[39;49m
[0;32m    106[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43mOC[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    107[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43m  PRINT HEAD LAST[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Print head for the last time step[39;49m
[0;32m    108[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43m  SAVE HEAD ALL[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Save head for all time steps[39;49m
[0;32m    109[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43m  SAVE BUDGET ALL[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Save budget for all time steps[39;49m
[0;32m    110[0m [38;5;124;43m    #     f.write(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m  BUDGET FILE [39;49m[38;5;132;43;01m{budgetfile_prt}[39;49;00m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Use the dynamic budget file[39;49m
[0;32m    111[0m [38;5;124;43m    #     f.write(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m  PRINT FILE [39;49m[38;5;132;43;01m{prt_name}[39;49;00m[38;5;124;43m_output.dat[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Example print file[39;49m
[0;32m    112[0m [38;5;124;43m    #     f.write(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m  TRACK FILE [39;49m[38;5;132;43;01m{trackfile_prt}[39;49;00m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Use the dynamic track file[39;49m
[0;32m    113[0m [38;5;124;43m    #     f.write(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m  TRACKCSV FILE [39;49m[38;5;132;43;01m{trackcsvfile_prt}[39;49;00m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Use the dynamic track CSV file[39;49m
[0;32m    114[0m [38;5;124;43m    #     f.write(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m  TRACKHDR FILE [39;49m[38;5;132;43;01m{trackhdrfile_prt}[39;49;00m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Use the dynamic track header file[39;49m
[0;32m    115[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43m  NTRACKTIMES 5[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Example: 5 tracking times[39;49m
[0;32m    116[0m [38;5;124;43m    #     f.write([39;49m[38;5;124;43m"[39;49m[38;5;124;43m  TRACKTIMES 1.0 2.0 3.0 4.0 5.0[39;49m[38;5;130;43;01m\n[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)  # Example: tracking times[39;49m
[0;32m    117[0m 
[0;32m    118[0m [38;5;124;43m    # flopy.mf6.ModflowPrtoc([39;49m
[0;32m    119[0m [38;5;124;43m    #     prt,[39;49m
[0;32m    120[0m [38;5;124;43m    #     pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43moc[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    121[0m [38;5;124;43m    #     budget_filerecord=budget_record,[39;49m
[0;32m    122[0m [38;5;124;43m    #     track_filerecord=track_record,[39;49m
[0;32m    123[0m [38;5;124;43m    #     trackcsv_filerecord=trackcsv_record,[39;49m
[0;32m    124[0m [38;5;124;43m    #     ntracktimes= float(ntracktimes),[39;49m
[0;32m    125[0m [38;5;124;43m    #     tracktimes=[(t,) for t in tracktimes],[39;49m
[0;32m    126[0m [38;5;124;43m    #     saverecord = [([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHEAD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mALL[39;49m[38;5;124;43m"[39;49m[38;5;124;43m), ([39;49m[38;5;124;43m"[39;49m[38;5;124;43mBUDGET[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mALL[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)],[39;49m
[0;32m    127[0m [38;5;124;43m    #     printrecord = [([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHEAD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mLAST[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)][39;49m
[0;32m    128[0m [38;5;124;43m    # )[39;49m
[0;32m    129[0m 
[0;32m    130[0m [38;5;124;43m    # Debug prints to check if the paths exist[39;49m
[0;32m    131[0m [38;5;124;43m    head_path = gwf_ws / headfile[39;49m
[0;32m    132[0m [38;5;124;43m    budget_path = gwf_ws / budgetfile[39;49m
[0;32m    133[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHead file path:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, head_path)[39;49m
[0;32m    134[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mBudget file path:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, budget_path)[39;49m
[0;32m    135[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mHead file exists:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, head_path.exists())  [39;49m
[0;32m    136[0m [38;5;124;43m    print([39;49m[38;5;124;43m"[39;49m[38;5;124;43mBudget file exists:[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, budget_path.exists())[39;49m
[0;32m    137[0m 
[0;32m    138[0m [38;5;124;43m    # Instantiate the MODFLOW 6 prt flow model interface[39;49m
[0;32m    139[0m [38;5;124;43m    pd = [[39;49m
[0;32m    140[0m [38;5;124;43m        ([39;49m[38;5;124;43m"[39;49m[38;5;124;43mGWFHEAD[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, pl.Path(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m../[39;49m[38;5;132;43;01m{gwf_ws.name}[39;49;00m[38;5;124;43m/[39;49m[38;5;132;43;01m{headfile}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)),[39;49m
[0;32m    141[0m [38;5;124;43m        ([39;49m[38;5;124;43m"[39;49m[38;5;124;43mGWFBUDGET[39;49m[38;5;124;43m"[39;49m[38;5;124;43m, pl.Path(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43m../[39;49m[38;5;132;43;01m{gwf_ws.name}[39;49;00m[38;5;124;43m/[39;49m[38;5;132;43;01m{budgetfile}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)),[39;49m
[0;32m    142[0m [38;5;124;43m    ][39;49m
[0;32m    143[0m [38;5;124;43m    [39;49m
[0;32m    144[0m [38;5;124;43m    flopy.mf6.ModflowPrtfmi(prt, packagedata=pd)[39;49m
[0;32m    145[0m 
[0;32m    146[0m [38;5;124;43m    # Create an explicit model solution (EMS) for the MODFLOW 6 prt model[39;49m
[0;32m    147[0m [38;5;124;43m    ems = flopy.mf6.ModflowEms([39;49m
[0;32m    148[0m [38;5;124;43m        prtsim,[39;49m
[0;32m    149[0m [38;5;124;43m        pname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mems[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    150[0m [38;5;124;43m        filename=f[39;49m[38;5;124;43m"[39;49m[38;5;132;43;01m{prt_name}[39;49;00m[38;5;124;43m.ems[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    151[0m [38;5;124;43m    )[39;49m
[0;32m    152[0m [38;5;124;43m    prtsim.register_solution_package(ems, [prt.name])[39;49m
[0;32m    153[0m 
[0;32m    154[0m [38;5;124;43m    print(f[39;49m[38;5;124;43m"[39;49m[38;5;124;43mBuilding PRT model for [39;49m[38;5;132;43;01m{example_name}[39;49;00m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    155[0m [38;5;124;43m    [39;49m
[0;32m    156[0m [38;5;124;43m    # Instantiate the MODPATH 7 object[39;49m
[0;32m    157[0m [38;5;124;43m    mp7 = flopy.modpath.Modpath7([39;49m
[0;32m    158[0m [38;5;124;43m        modelname=mp7_name,[39;49m
[0;32m    159[0m [38;5;124;43m        flowmodel=gwf,[39;49m
[0;32m    160[0m [38;5;124;43m        exe_name=md7_exe_path,[39;49m
[0;32m    161[0m [38;5;124;43m        model_ws=mp7_ws,[39;49m
[0;32m    162[0m [38;5;124;43m        budgetfilename=budget_path,[39;49m
[0;32m    163[0m [38;5;124;43m        headfilename=head_path,[39;49m
[0;32m    164[0m [38;5;124;43m    )[39;49m
[0;32m    165[0m 
[0;32m    166[0m [38;5;124;43m    # Instantiate the MODPATH 7 basic data[39;49m
[0;32m    167[0m [38;5;124;43m    flopy.modpath.Modpath7Bas(mp7, porosity=porosity, defaultiface=[39;49m[38;5;124;43m{[39;49m[38;5;124;43m"[39;49m[38;5;124;43mRCH[39;49m[38;5;124;43m"[39;49m[38;5;124;43m: 6, [39;49m[38;5;124;43m"[39;49m[38;5;124;43mEVT[39;49m[38;5;124;43m"[39;49m[38;5;124;43m: 6})[39;49m
[0;32m    168[0m 
[0;32m    169[0m [38;5;124;43m    # Instantiate the MODPATH 7 particle groups[39;49m
[0;32m    170[0m [38;5;124;43m    pg1a = flopy.modpath.ParticleGroup([39;49m
[0;32m    171[0m [38;5;124;43m        particlegroupname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mPG1A[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    172[0m [38;5;124;43m        particledata=mp7_particle_data_1a,[39;49m
[0;32m    173[0m [38;5;124;43m        filename=sim_name + [39;49m[38;5;124;43m"[39;49m[38;5;124;43ma.sloc[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    174[0m [38;5;124;43m    )[39;49m
[0;32m    175[0m [38;5;124;43m    # pg1b = flopy.modpath.ParticleGroupLRCTemplate([39;49m
[0;32m    176[0m [38;5;124;43m    #     particlegroupname=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mPG1B[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    177[0m [38;5;124;43m    #     particledata=mp7_particle_data_1b,[39;49m
[0;32m    178[0m [38;5;124;43m    #     filename=sim_name + [39;49m[38;5;124;43m"[39;49m[38;5;124;43mb.sloc[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    179[0m [38;5;124;43m    # )[39;49m
[0;32m    180[0m 
[0;32m    181[0m [38;5;124;43m    # Instantiate the MODPATH 7 simulation[39;49m
[0;32m    182[0m [38;5;124;43m    mpsim = flopy.modpath.Modpath7Sim([39;49m
[0;32m    183[0m [38;5;124;43m        mp7,[39;49m
[0;32m    184[0m [38;5;124;43m        simulationtype=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcombined[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    185[0m [38;5;124;43m        trackingdirection=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mforward[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    186[0m [38;5;124;43m        weaksinkoption=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mpass_through[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    187[0m [38;5;124;43m        weaksourceoption=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mpass_through[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    188[0m [38;5;124;43m        budgetoutputoption=[39;49m[38;5;124;43m"[39;49m[38;5;124;43msummary[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    189[0m [38;5;124;43m        referencetime=[0, 0, 0.0],[39;49m
[0;32m    190[0m [38;5;124;43m        stoptimeoption=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mextend[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    191[0m [38;5;124;43m        timepointdata=[500, 1000.0],[39;49m
[0;32m    192[0m [38;5;124;43m        zonedataoption=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mon[39;49m[38;5;124;43m"[39;49m[38;5;124;43m,[39;49m
[0;32m    193[0m [38;5;124;43m        zones=izone,[39;49m
[0;32m    194[0m [38;5;124;43m        particlegroups=[pg1a],[39;49m
[0;32m    195[0m [38;5;124;43m    )[39;49m
[0;32m    196[0m [38;5;124;43m    return prtsim, prt, mpsim, mp7[39;49m
[0;32m    197[0m 
[0;32m    198[0m [38;5;124;43mprint([39;49m[38;5;124;43m"[39;49m[38;5;124;43mâœ… build_particle_models function saved successfully.[39;49m[38;5;124;43m"[39;49m[38;5;124;43m)[39;49m
[0;32m    199[0m [38;5;124;43m"""[39;49m[43m)[49m

File [1;32mC:\Program Files\Python311\Lib\encodings\cp1252.py:19[0m, in [0;36mIncrementalEncoder.encode[1;34m(self, input, final)[0m
[0;32m     18[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mencode[39m([38;5;28mself[39m, [38;5;28minput[39m, final[38;5;241m=[39m[38;5;28;01mFalse[39;00m):
[1;32m---> 19[0m     [38;5;28;01mreturn[39;00m [43mcodecs[49m[38;5;241;43m.[39;49m[43mcharmap_encode[49m[43m([49m[38;5;28;43minput[39;49m[43m,[49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43merrors[49m[43m,[49m[43mencoding_table[49m[43m)[49m[[38;5;241m0[39m]

[1;31mUnicodeEncodeError[0m: 'charmap' codec can't encode character '\u2705' in position 7415: character maps to <undefined>

